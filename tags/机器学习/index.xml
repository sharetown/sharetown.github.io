<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>机器学习 on SharetownBlog</title>
    <link>https://github.com/sharetown/sharetown.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</link>
    <description>Recent content in 机器学习 on SharetownBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 26 Oct 2022 22:14:25 +0800</lastBuildDate><atom:link href="https://github.com/sharetown/sharetown.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>线性回归及非线性回归</title>
      <link>https://github.com/sharetown/sharetown.github.io/posts/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%8F%8A%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</link>
      <pubDate>Wed, 26 Oct 2022 22:14:25 +0800</pubDate>
      
      <guid>https://github.com/sharetown/sharetown.github.io/posts/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%8F%8A%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</guid>
      <description>线性还是非线性是要根据分析的目标来决定的，在线性回归和非线性回归中，我们需要求解的是模型参数，因而，线性与非线性描述的是函数模型与模型参数之间的关系，而非因变量与自变量之间的关系
代价函数（损失函数）（Cost function） # 最小二乘法 真实值$y$,预测值$h_\theta$,则误差平方为$(y-h_\theta(x))^2$. 找到合适的参数，使得误差平方和： $$ 对于线性的： h_\theta(x)=\theta_0+\theta_1x J(\theta_0,\theta_1)=\dfrac{1}{2m}\textstyle\sum_{i=1}^m(y^i-h_\theta(x^j))^2 $$ 最小
我们使用相关系数去衡量线性相关的强弱： $$ r_{xy}=\dfrac{\sum(X_i-\overline{X})(Y_i-\overline{Y})}{\sqrt{\sum(X_i-\overline{X})^2\sum(Y_i-\overline{Y})^2}} $$ 其中$X_i$表示真实值的横坐标；$Y_i$表示真实值纵横坐标；$\overline{X}$表示真实值的横坐标的平均值；$\overline{Y}$表示真实值的纵坐标的平均值。 相关系数$R^2$是用来描述两个变量之间的线性关系的，但决定系数的适用范围更广, 可以用于描述非线性或者有个及两个以上自变量的相关关系。它可以用来评价模型的效果。 总平方和（SST）：$\textstyle\sum_{i=1}^n(y_i-\overline{y})^2$ 回归平方和（SSR）：$\textstyle\sum_{i=1}^n(\hat{y}-\overline{y})^2$ 残差平方和（SSE）：$\textstyle\sum_{i=1}^n(y_i-\hat{y})^2$ 它们三者的关系是：$SST=SSR+SSE$ 决定系数：$R^2=\dfrac{SSR}{SST}=1-\dfrac{SSE}{SST}$ 一、梯度下降 # 需要做一个迭代： $$ \theta_j:=\theta_j-\alpha\dfrac{\partial}{\partial\theta_j}J(\theta_0,\theta_1),j=0,1 $$ 其中$\alpha$为学习率;$:=$为赋值符，将右边赋值给左边</description>
    </item>
    
    <item>
      <title>Numpy的简单入门</title>
      <link>https://github.com/sharetown/sharetown.github.io/posts/numpy%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/</link>
      <pubDate>Wed, 26 Oct 2022 21:58:57 +0800</pubDate>
      
      <guid>https://github.com/sharetown/sharetown.github.io/posts/numpy%E7%9A%84%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/</guid>
      <description>NumPy是一个功能强大的Python库，主要用于对多维数组执行计算。NumPy这个词来源于两个单词&amp;ndash; Numerical和Python。NumPy提供了大量的库函数和操作，可以帮助程序员轻松地进行数值计算。这类数值计算广泛用于以下任务：
机器学习模型：在编写机器学习算法时，需要对矩阵进行各种数值计算。例如矩阵乘法、换位、加法等。NumPy提供了一个非常好的库，用于简单(在编写代码方面)和快速(在速度方面)计算。NumPy数组用于存储训练数据和机器学习模型的参数。 图像处理和计算机图形学：计算机中的图像表示为多维数字数组。NumPy成为同样情况下最自然的选择。实际上，NumPy提供了一些优秀的库函数来快速处理图像。例如，镜像图像、按特定角度旋转图像等。 数学任务：NumPy对于执行各种数学任务非常有用，如数值积分、微分、内插、外推等。因此，当涉及到数学任务时，它形成了一种基于Python的MATLAB的快速替代。 一、Numpy中的数组 # import numpy as np
函数 作用 np.array() 生成一维或多维数组 np.shape 查看数组的形状。 np.zeros((n)) 生成一个n元素的一维的全0数组 np.zeros((n,m)) 生成一个n*m维的全0数组 np.ones((n)) 生成全1的数组 np.ones((n,m)) 生成n*m的全1的数组 np.random.random((n)) 随机生成一个n元素的一维数组 (()) 凡是带两个括号的函数里面跟的都是向量。可以是多个数 np.</description>
    </item>
    
  </channel>
</rss>
